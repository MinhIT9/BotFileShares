# main.py

from datetime import timedelta
import datetime, random, asyncio, threading, aiohttp, re
from config import Config  # Import class Config
from telethon import events, Button
from api_utlis import delete_code_from_api, fetch_activation_links, save_single_user_access_to_api, load_users_access_from_api, get_or_create_users_access_object, schedule_remove_expired_users_access
from config import (your_bot_username, channel_id, pending_activations, 
                    user_link_map, distributed_links, LINK_DURATION,
                    client, bot_token, USER_ACTIVATIONS_API)

# G√°n bi·∫øn m·ªõi cho users_access, activation_links 
config_instance = Config()
users_access = config_instance.users_access 
activation_links = config_instance.activation_links

# H√†m Ki·ªÉm Tra H·∫øt H·∫°n ƒê·ªãnh K·ª≥
LINK_DURATION_SECONDS = LINK_DURATION.total_seconds()
async def check_and_restore_expired_links():
    while True:
        current_time = datetime.datetime.now()
        expired_users = []
        for user, expiry in list(pending_activations.items()):
            if expiry < current_time:
                expired_users.append(user)
                code = user_link_map.get(user)
                if code:
                    # Tr·∫£ m√£ v·ªÅ pool n·∫øu h·∫øt h·∫°n
                    activation_links[code] = distributed_links.pop(code, None)
                    user_link_map.pop(user, None)

        for user in expired_users:
            pending_activations.pop(user, None)

        if expired_users:
            print(f"C√°c link k√≠ch ho·∫°t cho {expired_users} ƒë√£ h·∫øt h·∫°n v√† gi·ªù ƒë√¢y ƒë√£ s·∫µn s√†ng tr·ªü l·∫°i.")

        await asyncio.sleep(LINK_DURATION_SECONDS)

# ƒê√¢y l√† h√†m ki·ªÉm tra c√°c k√≠ch ho·∫°t ƒëang ch·ªù v√† n·∫±m ·ªü c·∫•p ƒë·ªô module
def check_pending_activations():
    current_time = datetime.datetime.now()
    expired_users = []
    for user, expiry in list(pending_activations.items()):
        if expiry < current_time:
            expired_users.append(user)
            code = user_link_map.get(user)
            if code:
                # Tr·∫£ m√£ v·ªÅ pool n·∫øu h·∫øt h·∫°n
                activation_links[code] = distributed_links[code]
                user_link_map.pop(user, None)
                distributed_links.pop(code, None)

    for user in expired_users:
        pending_activations.pop(user, None)

    if expired_users:
        print(f"C√°c link k√≠ch ho·∫°t cho {expired_users} ƒë√£ h·∫øt h·∫°n v√† gi·ªù ƒë√¢y ƒë√£ s·∫µn s√†ng tr·ªü l·∫°i.")

# H√†m n√†y ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng y√™u c·∫ßu link k√≠ch ho·∫°t m·ªõi ho·∫∑c khi h·ªç kh√¥ng ph·∫£i VIP
async def provide_new_activation_link(event, current_time):
    available_codes = [code for code in activation_links if code not in user_link_map.values()]
    if available_codes:
        random_code = random.choice(available_codes)
        link_info = activation_links[random_code]
        link = link_info['url']
        link_backup = link_info.get('backup_url', 'Kh√¥ng c√≥ link d·ª± ph√≤ng')
        response_text = (f"Link k√≠ch ho·∫°t m·ªõi c·ªßa b·∫°n: {link}\n"
                         f"Link d·ª± ph√≤ng: {link_backup}")
        user_link_map[event.sender_id] = random_code
        pending_activations[event.sender_id] = current_time + LINK_DURATION
        await event.respond(response_text, buttons=[Button.url("K√≠ch ho·∫°t", link)], parse_mode='html')
    else:
        await event.respond("Hi·ªán t·∫°i kh√¥ng c√≥ m√£ k√≠ch ho·∫°t n√†o kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.")

async def provide_activation_link(event, renewing=False):
    current_time = datetime.datetime.now()
    user_id = event.sender_id

    # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c link ƒë√£ h·∫øt h·∫°n
    check_pending_activations()

    # N·∫øu ƒëang gia h·∫°n v√† ng∆∞·ªùi d√πng c√≥ link ch∆∞a h·∫øt h·∫°n
    if renewing and user_id in user_link_map and current_time < pending_activations[user_id]:
        code = user_link_map[user_id]
        link_info = activation_links[code]
        response_text = (f"Link k√≠ch ho·∫°t c·ªßa b·∫°n v·∫´n c√≤n hi·ªáu l·ª±c: {link_info['url']}\n"
                         f"Link d·ª± ph√≤ng: {link_info.get('backup_url', 'Kh√¥ng c√≥ link d·ª± ph√≤ng')}")
        await event.respond(response_text, buttons=[Button.url("K√≠ch ho·∫°t", link_info['url'])], parse_mode='html')
        return

    # X·ª≠ l√Ω c·∫•p link m·ªõi
    available_codes = [code for code in activation_links if code not in distributed_links]
    if available_codes:
        chosen_code = random.choice(available_codes)
        link_info = activation_links[chosen_code]
        response_text = (f"Link k√≠ch ho·∫°t m·ªõi c·ªßa b·∫°n: {link_info['url']}\n"
                         f"Link d·ª± ph√≤ng: {link_info.get('backup_url', 'Kh√¥ng c√≥ link d·ª± ph√≤ng')}")
        pending_activations[user_id] = current_time + LINK_DURATION
        user_link_map[user_id] = chosen_code
        distributed_links[chosen_code] = user_id

        await event.respond(response_text, buttons=[Button.url("K√≠ch ho·∫°t", link_info['url'])], parse_mode='html')
    else:
        await event.respond("Hi·ªán t·∫°i kh√¥ng c√≥ m√£ k√≠ch ho·∫°t n√†o kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.")

        
# X√°c ƒë·ªãnh regex cho l·ªánh th√™m code
@client.on(events.NewMessage(pattern=r'/newcodettgs ([\s\S]+)'))
async def add_new_code(event):
    codes_data = event.pattern_match.group(1)
    codes_lines = codes_data.strip().split('\n')
    
    for line in codes_lines:
        parts = line.strip().split()
        if len(parts) == 4:
            # T·∫°o payload cho API
            code, link, backup_link, duration = parts
            payload = {
                'Code': code,
                'Link': link,
                'LinkBackup': backup_link,
                'duration': int(duration)
            }
            
            # Th√™m v√†o pool t·∫°m th·ªùi tr∆∞·ªõc
            activation_links[code] = {
                'url': link,
                'backup_url': backup_link,
                'duration': int(duration)
            }
            
            # C·∫≠p nh·∫≠t API
            async with aiohttp.ClientSession() as session:
                try:
                    async with session.post(USER_ACTIVATIONS_API, json=payload) as response:
                        if response.status == 201:
                            await event.respond(f"Th√™m m√£ th√†nh c√¥ng: {payload['Code']}")
                        else:
                            error_message = await response.text()
                            # N·∫øu th√™m v√†o API kh√¥ng th√†nh c√¥ng, x√≥a kh·ªèi pool t·∫°m th·ªùi
                            activation_links.pop(code, None)
                            await event.respond(f"Kh√¥ng th·ªÉ th√™m m√£ {payload['Code']}: {error_message}")
                except aiohttp.ClientError as e:
                    # N·∫øu th√™m v√†o API kh√¥ng th√†nh c√¥ng, x√≥a kh·ªèi pool t·∫°m th·ªùi
                    activation_links.pop(code, None)
                    await event.respond(f"L·ªói k·∫øt n·ªëi API: {str(e)}")
        else:
            await event.respond("ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng ƒë√∫ng. C·∫ßn c√≥ 4 ph·∫ßn: code, link ch√≠nh, link d·ª± ph√≤ng v√† th·ªùi h·∫°n.")
                
@client.on(events.NewMessage(pattern='/updatecode'))
async def handle_update_code_command(event):
    print("ƒê√£ nh·∫≠n y√™u c·∫ßu c·∫≠p nh·∫≠t m√£.")
    try:
        new_activation_links = await fetch_activation_links()
        if new_activation_links:
            activation_links = new_activation_links
            await event.respond("C·∫≠p nh·∫≠t m√£ k√≠ch ho·∫°t th√†nh c√¥ng!")
            print(f"M√£ k√≠ch ho·∫°t ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·∫°i {datetime.datetime.now()}.")
        else:
            await event.respond("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m√£ k√≠ch ho·∫°t t·ª´ API.")
    except Exception as e:
        await event.respond(f"L·ªói khi c·∫≠p nh·∫≠t m√£: {str(e)}")
        print(f"L·ªói c·∫≠p nh·∫≠t m√£ k√≠ch ho·∫°t: {e}")
          
@client.on(events.NewMessage(pattern='/checkcode'))
async def check_code_availability(event):
    global activation_links  # Khai b√°o s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
    # ƒê·∫øm s·ªë l∆∞·ª£ng m√£ theo t·ª´ng th·ªùi h·∫°n s·ª≠ d·ª•ng
    duration_counts = {}
    for code, code_info in activation_links.items():
        # Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu tr∆∞·ªõc khi truy c·∫≠p 'duration'
        if isinstance(code_info, dict) and 'duration' in code_info:
            duration = code_info['duration']
            if duration in duration_counts:
                duration_counts[duration] += 1
            else:
                duration_counts[duration] = 1
        else:
            print(f"Unexpected data type for code '{code}' in activation_links: {type(code_info)}")
            continue  # Skip this iteration if the data type is not as expected
    
    # T·∫°o v√† g·ª≠i th√¥ng b√°o v·ªÅ s·ªë l∆∞·ª£ng m√£ theo t·ª´ng th·ªùi h·∫°n
    response_message = "<b>T√¨nh tr·∫°ng m√£ k√≠ch ho·∫°t VIP hi·ªán t·∫°i:</b>\n"
    for duration, count in sorted(duration_counts.items()):
        response_message += f"Code VIP: <b>{duration} ng√†y</b> - c√≤n l·∫°i: <b>{count} m√£</b>\n"
    
    # Th√™m th√¥ng b√°o h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng /kichhoat
    response_message += "\nM√£ ho√†n to√†n ng·∫´u nhi√™n, n√™n ch√∫c c√°c b·∫°n may m·∫Øn nh√©!\n\nüëç S·ª≠ d·ª•ng <b>/kichhoat</b> ƒë·ªÉ l·∫•y m√£ k√≠ch ho·∫°t VIP.\n\nB·∫£n quy·ªÅn thu·ªôc v·ªÅ @BotShareFilesTTG"

    # Ki·ªÉm tra n·∫øu c√≥ m√£ kh·∫£ d·ª•ng ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi
    if duration_counts:
        await event.respond(response_message, parse_mode='html')
    else:
        await event.respond("Hi·ªán kh√¥ng c√≥ m√£ k√≠ch ho·∫°t n√†o kh·∫£ d·ª•ng.")


@client.on(events.NewMessage(pattern='/kichhoat'))
async def request_activation_link(event):
    user_id = event.sender_id
    current_time = datetime.datetime.now()

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ l√† VIP v√† th√¥ng b√°o h·∫°n s·ª≠ d·ª•ng c√≤n l·∫°i
    if user_id in users_access and current_time < users_access[user_id]:
        expiry_str = users_access[user_id].strftime('%H:%M %d-%m-%Y')
        await event.respond(
            f"B·∫°n ƒë√£ l√† VIP v√† h·∫°n s·ª≠ d·ª•ng ƒë·∫øn: {expiry_str}. S·ª≠ d·ª•ng /giahan ƒë·ªÉ tƒÉng th·ªùi gian s·ª≠ d·ª•ng VIP."
        )
        return

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ link h·∫øt h·∫°n kh√¥ng
    if user_id in pending_activations and current_time < pending_activations[user_id]:
        code = user_link_map[user_id]
        link_info = activation_links[code]
        link = link_info['url']
        link_backup = link_info.get('backup_url', 'Kh√¥ng c√≥ link d·ª± ph√≤ng')
        response_text = (f"Link k√≠ch ho·∫°t c·ªßa b·∫°n v·∫´n c√≤n hi·ªáu l·ª±c: {link}\n"
                        f"Link d·ª± ph√≤ng: {link_backup}")
        await event.respond(response_text)
        return

    # Cung c·∫•p link m·ªõi n·∫øu kh√¥ng c√≥ link ho·∫∑c link ƒë√£ h·∫øt h·∫°n
    await provide_activation_link(event, renewing=False)
        
# H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi user ƒë√£ l√† VIP v√† mu·ªën gia h·∫°n s·ª≠ d·ª•ng
@client.on(events.NewMessage(pattern='/giahan'))
async def renew_vip(event):
    user_id = event.sender_id
    current_time = datetime.datetime.now()

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ l√† VIP ch∆∞a v√† cung c·∫•p t√πy ch·ªçn gia h·∫°n
    if user_id in users_access and current_time < users_access[user_id]:
        await provide_activation_link(event, renewing=True)
    else:
        await event.respond("Ch·ª©c nƒÉng n√†y ch·ªâ d√†nh cho VIP. S·ª≠ d·ª•ng /kichhoat ƒë·ªÉ tr·ªü th√†nh VIP.")

        
@client.on(events.NewMessage(pattern=r'/code (\d+)'))
async def activate_code(event):
    user_id = event.sender_id
    code_entered = event.pattern_match.group(1).strip()
    current_time = datetime.datetime.now()

    # Ki·ªÉm tra m√£ nh·∫≠p h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n
    if code_entered in activation_links and code_entered in user_link_map.values() and user_id in pending_activations and current_time < pending_activations[user_id]:
        code_info = activation_links.pop(code_entered)
        duration = timedelta(days=code_info['duration'])
        expiry_time = users_access.get(user_id, current_time)
        new_expiry_time = expiry_time + duration

        users_access[user_id] = new_expiry_time
        distributed_links.pop(code_entered, None)
        pending_activations.pop(user_id, None)

        # C·∫≠p nh·∫≠t th√¥ng tin truy c·∫≠p v√†o API
        access_object = await get_or_create_users_access_object()
        access_object["users_access"][str(user_id)] = new_expiry_time.isoformat()
        await save_single_user_access_to_api(access_object)

        expiry_str = new_expiry_time.strftime('%H:%M %d-%m-%Y')
        await event.respond(f"B·∫°n ƒë√£ k√≠ch ho·∫°t th√†nh c√¥ng VIP. H·∫°n s·ª≠ d·ª•ng ƒë·∫øn: {expiry_str}.")
    else:
        await event.respond("M√£ k√≠ch ho·∫°t kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: <b>/code 12345</b>.", parse_mode='html')

@client.on(events.NewMessage(pattern='/start'))
async def send_welcome(event):
    check_pending_activations()
    # Ki·ªÉm tra payload t·ª´ link /start ƒë·ªÉ x√°c ƒë·ªãnh xem c√≥ c·∫ßn forward tin nh·∫Øn t·ª´ channel kh√¥ng
    if event.message.message.startswith('/start channel_'):
        channel_msg_id = int(event.message.message.split('_')[-1])
        await client.forward_messages(event.sender_id, channel_msg_id, channel_id)
    await event.respond("‚ù§Ô∏è BOT Share File Ch√∫c b·∫°n xem phim vui v·∫ª! \n \n <b>Copyright: @BotShareFilesTTG</b> \n \n D√πng /kichhoat ƒë·ªÉ k√≠ch ho·∫°t VIP Free.", parse_mode='html')

@client.on(events.NewMessage(func=lambda e: e.is_private))
async def handler(event):
    user_id = event.sender_id
    current_time = datetime.datetime.now()

    # Ki·ªÉm tra n·∫øu tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng '/' th√¨ x·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát
    if event.text.startswith('/'):
        # B·ªè qua ƒë·ªÉ x·ª≠ l√Ω l·ªánh trong c√°c s·ª± ki·ªán kh√°c
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i VIP kh√¥ng
    is_vip = user_id in users_access and current_time < users_access[user_id]

    # ƒê·ªãnh d·∫°ng link mong mu·ªën
    expected_link_format = f'https://t.me/{your_bot_username}?start=channel_'

    # X·ª≠ l√Ω tin nh·∫Øn l√† link d·∫°ng mong mu·ªën
    if event.text.startswith(expected_link_format):
        channel_msg_id_str = event.text[len(expected_link_format):]
        if channel_msg_id_str.isdigit():
            channel_msg_id = int(channel_msg_id_str)
            try:
                message = await client.get_messages(channel_id, ids=channel_msg_id)
                if message:
                    await client.forward_messages(event.sender_id, message.id, channel_id)
                    # G·ª≠i th√¥ng b√°o ƒë·∫∑c bi·ªát k√®m theo
                    await event.respond("Bot chia s·∫ª file PRO: @BotShareFilesTTG")
                else:
                    await event.respond("Link kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.")
            except Exception as e:
                await event.respond(f"Kh√¥ng th·ªÉ truy c·∫≠p n·ªôi dung tin nh·∫Øn: {str(e)}")
        else:
            await event.respond("Link kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.")
    # X·ª≠ l√Ω tin nh·∫Øn l√† media t·ª´ ng∆∞·ªùi d√πng VIP
    elif event.media and is_vip:
        caption = event.message.text if event.message.text else ""
        msg = await client.send_file(channel_id, event.media, caption=caption)
        start_link = f'https://t.me/{your_bot_username}?start=channel_{msg.id}'
        await event.respond(f'Link c√¥ng khai c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o: {start_link}', buttons=[Button.url('Xem Media', start_link)])
    # Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i VIP g·ª≠i media ho·∫∑c text kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng link mong mu·ªën
    else:
        await event.respond("B·∫°n c·∫ßn k√≠ch ho·∫°t VIP ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y. \n B·∫•m /kichhoat ƒë·ªÉ tr·ªü th√†nh th√†nh vi√™n VIP.")

async def initial_load():
    global activation_links, users_access
    activation_links = await fetch_activation_links()
    users_access = await load_users_access_from_api()

if __name__ == '__main__':
    try:
        client.start(bot_token=bot_token)
        print("Kh·ªüi ƒë·ªông BOT th√†nh c√¥ng!")
        
        # Th√™m l·ªãch tr√¨nh x√≥a ng∆∞·ªùi d√πng h·∫øt h·∫°n t·ª´ api_utils.
        client.loop.create_task(schedule_remove_expired_users_access())
        client.loop.create_task(check_and_restore_expired_links())

        client.loop.run_until_complete(initial_load())
        client.run_until_disconnected()
    except Exception as e:
        print(f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}')