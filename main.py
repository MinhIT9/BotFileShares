# main.py

from datetime import timedelta
import datetime, random, asyncio, threading, aiohttp  
from config import Config  # Import class Config
from telethon import events, Button
from api_utlis import delete_code_from_api, fetch_activation_links
from config import (your_bot_username, channel_id, pending_activations, users_access, 
                    user_link_map, distributed_links, LINK_DURATION,
                    client, bot_token, USER_ACTIVATIONS_API, UPDATE_CODE_DURATION)

# ƒê√¢y l√† h√†m ki·ªÉm tra c√°c k√≠ch ho·∫°t ƒëang ch·ªù v√† n·∫±m ·ªü c·∫•p ƒë·ªô module
def check_pending_activations():
    global pending_activations, user_link_map
    current_time = datetime.datetime.now()
    expired_users = []

    for user, expiry in pending_activations.items():
        if expiry < current_time:
            expired_users.append(user)
            code = user_link_map.get(user)
            if code and code in distributed_links:
                Config.activation_links[code] = distributed_links[code]
                user_link_map.pop(user, None)

    for user in expired_users:
        pending_activations.pop(user, None)
        distributed_links.pop(user, None)

    if expired_users:
        print(f"Expired activation links for {expired_users} are now available again.")

async def provide_new_activation_link(event, current_time):
    available_codes = [code for code in Config.activation_links if code not in user_link_map.values()]
    if available_codes:
        random_code = random.choice(available_codes)
        link = Config.activation_links[random_code]['url']
        user_link_map[event.sender_id] = random_code
        pending_activations[event.sender_id] = current_time + LINK_DURATION
        await event.respond(f"<b>Activation Link:</b> {link}", buttons=[Button.url("Activate", link)], parse_mode='html')
    else:
        await event.respond("No activation links available. Please try again later.")
        
        
# X√°c ƒë·ªãnh regex cho l·ªánh m·ªõi
@client.on(events.NewMessage(pattern='/newcodettgs ([\s\S]+)'))
async def add_new_code(event):
    # Ghi nh·∫≠n b·∫Øt ƒë·∫ßu x·ª≠ l√Ω l·ªánh
    print("Received new code addition request")
    # T√°ch n·ªôi dung th√†nh c√°c d√≤ng
    codes_data = event.pattern_match.group(1)
    codes_lines = codes_data.strip().split('\n')
    
    async with aiohttp.ClientSession() as session:
        for line in codes_lines:
            parts = line.strip().split()
            if len(parts) == 3:
                # T·∫°o t·ª´ ƒëi·ªÉn cho d·ªØ li·ªáu JSON
                payload = {
                    'Code': parts[0],
                    'Link': parts[1],
                    'duration': int(parts[2])
                }
                try:
                    # Ghi nh·∫≠n chi ti·∫øt y√™u c·∫ßu g·ª≠i ƒëi
                    print(f"Attempting to add new code: {payload}")
                    # Th·ª±c hi·ªán POST request
                    async with session.post(USER_ACTIVATIONS_API, json=payload) as response:
                        if response.status == 201:
                            await event.respond(f"ƒê√£ th√™m th√†nh c√¥ng: {payload['Code']}")
                            print(f"Successfully added code: {payload['Code']}")
                        else:
                            # ƒê·ªçc ph·∫£n h·ªìi l·ªói t·ª´ API
                            error_message = await response.text()
                            await event.respond(f"Kh√¥ng th·ªÉ th√™m code {payload['Code']}: {error_message}")
                            print(f"Failed to add code {payload['Code']}: {error_message}")
                except aiohttp.ClientError as e:
                    await event.respond(f"L·ªói khi k·∫øt n·ªëi v·ªõi API: {str(e)}")
                    print(f"API connection error: {str(e)}")
            else:
                await event.respond(f"ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng: {line}")
                print(f"Incorrect format for line: {line}")
                
@client.on(events.NewMessage(pattern='/updatecode'))
async def handle_update_code_command(event):
    print("Received request to update codes.")
    try:
        # G·ªçi h√†m fetch_activation_links ƒë·ªÉ l·∫•y m√£ m·ªõi t·ª´ API
        new_activation_links = await fetch_activation_links()
        if new_activation_links:
            Config.activation_links = new_activation_links
            await event.respond("C·∫≠p nh·∫≠t m√£ k√≠ch ho·∫°t th√†nh c√¥ng!")
            print(f"Activation links updated at {datetime.datetime.now()}.")
        else:
            await event.respond("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m√£ k√≠ch ho·∫°t t·ª´ API.")
    except Exception as e:
        await event.respond(f"L·ªói khi c·∫≠p nh·∫≠t m√£: {str(e)}")
        print(f"Error updating activation links: {e}")
           


@client.on(events.NewMessage(pattern='/checkcode'))
async def check_code_availability(event):
    # ƒê·∫øm s·ªë l∆∞·ª£ng m√£ theo t·ª´ng th·ªùi h·∫°n s·ª≠ d·ª•ng
    activation_links = Config.activation_links

    duration_counts = {}
    for code_info in activation_links.values():
        duration = code_info['duration']
        if duration in duration_counts:
            duration_counts[duration] += 1
        else:
            duration_counts[duration] = 1
    
    # T·∫°o v√† g·ª≠i th√¥ng b√°o v·ªÅ s·ªë l∆∞·ª£ng m√£ theo t·ª´ng th·ªùi h·∫°n
    response_message = "<b>T√¨nh tr·∫°ng m√£ k√≠ch ho·∫°t VIP hi·ªán t·∫°i:</b>\n"
    for duration, count in sorted(duration_counts.items()):
        response_message += f"Code VIP: <b>{duration} ng√†y</b> - c√≤n l·∫°i: <b>{count} m√£</b> \n"
    
    # Th√™m th√¥ng b√°o h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng /kichhoat
    response_message += "\n M√£ ho√†n to√†n ng·∫´u nhi√™n,\nn√™n ch√∫c c√°c b·∫°n may m·∫Øn nh√©! \n \n üëç S·ª≠ d·ª•ng <b>/kichhoat</b> ƒë·ªÉ l·∫•y m√£ k√≠ch ho·∫°t VIP.\n \n B·∫£n quy·ªÅn thu·ªôc v·ªÅ @BotShareFilesTTG"

    # Ki·ªÉm tra n·∫øu c√≥ m√£ kh·∫£ d·ª•ng ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi
    if duration_counts:
        await event.respond(response_message, parse_mode='html')
    else:
        await event.respond("Hi·ªán kh√¥ng c√≥ m√£ k√≠ch ho·∫°t n√†o kh·∫£ d·ª•ng.")


@client.on(events.NewMessage(pattern='/kichhoat'))
async def request_activation_link(event):
    activation_links = Config.activation_links
    
    check_pending_activations()
    current_time = datetime.datetime.now()

    # X·ª≠ l√Ω cho ng∆∞·ªùi d√πng ƒë√£ k√≠ch ho·∫°t VIP
    if event.sender_id in users_access and users_access[event.sender_id] > current_time:
        await provide_new_activation_link(event, current_time)
        return

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ nh·∫≠n link ch∆∞a v√† link ƒë√≥ c√≥ c√≤n hi·ªáu l·ª±c kh√¥ng
    if event.sender_id in pending_activations:
        if current_time < pending_activations[event.sender_id]:
            # N·∫øu link v·∫´n c√≤n hi·ªáu l·ª±c, th√¥ng b√°o cho ng∆∞·ªùi d√πng
            code = user_link_map[event.sender_id]
            link = activation_links[code]['url']
            await event.respond(
                f"B·∫°n ƒë√£ y√™u c·∫ßu k√≠ch ho·∫°t tr∆∞·ªõc ƒë√≥ v√† link v·∫´n c√≤n hi·ªáu l·ª±c. Vui l√≤ng truy c·∫≠p link sau ƒë·ªÉ l·∫•y m√£ k√≠ch ho·∫°t c·ªßa b·∫°n: {link}",
                buttons=[Button.url("L·∫•y m√£ k√≠ch ho·∫°t", link)], parse_mode='html'
            )
        else:
            # Link ƒë√£ h·∫øt h·∫°n, cung c·∫•p link m·ªõi
            await provide_new_activation_link(event, current_time)
    else:
        # Ng∆∞·ªùi d√πng ch∆∞a c√≥ link, cung c·∫•p link m·ªõi
        await provide_new_activation_link(event, current_time)

@client.on(events.NewMessage(pattern='/code (.+)'))
async def activate_code(event):
    code_entered = event.pattern_match.group(1).strip()
    current_time = datetime.datetime.now()

    # Ki·ªÉm tra xem code c√≥ trong activation_links v√† ch∆∞a ƒë∆∞·ª£c ph√¢n ph·ªëi ho·∫∑c ƒë√£ ƒë∆∞·ª£c ph√¢n ph·ªëi cho sender_id hi·ªán t·∫°i
    if code_entered in Config.activation_links:
        code_info = Config.activation_links[code_entered]
        # Th·ª±c hi·ªán th√™m b·∫•t k·ª≥ ki·ªÉm tra n√†o n·∫øu c·∫ßn thi·∫øt tr∆∞·ªõc khi k√≠ch ho·∫°t m√£
        duration = timedelta(days=code_info["duration"])
        new_expiry_time = users_access.get(event.sender_id, current_time) + duration

        # K√≠ch ho·∫°t m√£ cho ng∆∞·ªùi d√πng v√† c·∫≠p nh·∫≠t th·ªùi gian h·∫øt h·∫°n
        users_access[event.sender_id] = new_expiry_time
        # X√≥a m√£ kh·ªèi pool v√† c·∫•u tr√∫c d·ªØ li·ªáu
        del Config.activation_links[code_entered]

        # X√≥a m√£ kh·ªèi API
        await delete_code_from_api(code_info['id'])

        await event.respond(f"B·∫°n ƒë√£ k√≠ch ho·∫°t th√†nh c√¥ng! Th·ªùi gian s·ª≠ d·ª•ng m·ªõi c·ªßa b·∫°n l√† {new_expiry_time.strftime('%Y-%m-%d %H:%M:%S')}.")
        print(f"Code {code_entered} has been activated and deleted from the pool.")
    else:
        await event.respond("M√£ k√≠ch ho·∫°t kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.")

@client.on(events.NewMessage(pattern='/start'))
async def send_welcome(event):
    check_pending_activations()
    # Ki·ªÉm tra payload t·ª´ link /start ƒë·ªÉ x√°c ƒë·ªãnh xem c√≥ c·∫ßn forward tin nh·∫Øn t·ª´ channel kh√¥ng
    if event.message.message.startswith('/start channel_'):
        channel_msg_id = int(event.message.message.split('_')[-1])
        await client.forward_messages(event.sender_id, channel_msg_id, channel_id)
    await event.respond("‚ù§Ô∏è BOT Share File Ch√∫c b·∫°n xem phim vui v·∫ª! \n \n <b>Copyright: @BotShareFilesTTG</b> \n \n D√πng /kichhoat ƒë·ªÉ k√≠ch ho·∫°t VIP Free.", parse_mode='html')

@client.on(events.NewMessage(func=lambda e: e.is_private))
async def handler(event):
    # Ki·ªÉm tra n·∫øu tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng '/' th√¨ kh√¥ng x·ª≠ l√Ω trong handler n√†y
    if event.text.startswith('/'):
        return
    
    if event.sender_id in users_access and datetime.datetime.now() < users_access[event.sender_id]:
        if event.media:
            caption = event.message.text if event.message.text else ""
            msg = await client.send_file(channel_id, event.media, caption=caption)
            start_link = f'https://t.me/{your_bot_username}?start=channel_{msg.id}'
            await event.respond(f'Link public c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o: {start_link}', buttons=[Button.url('Xem Media', start_link)])
    else:
        await event.respond("B·∫°n c·∫ßn k√≠ch ho·∫°t truy c·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
        


# B·∫Øt ƒë·∫ßu client
client.start(bot_token=bot_token)

async def initial_activation_links_update():
    Config.activation_links = await fetch_activation_links()

if __name__ == '__main__':
    try:
        client.start(bot_token)
        print("Kh·ªüi ƒë·ªông BOT th√†nh c√¥ng!")
        # G·ªçi h√†m c·∫≠p nh·∫≠t link k√≠ch ho·∫°t ban ƒë·∫ßu khi bot kh·ªüi ƒë·ªông
        client.loop.run_until_complete(initial_activation_links_update())
        client.run_until_disconnected()
    except KeyboardInterrupt:
        print('Bot ƒë√£ ƒë∆∞·ª£c ng·∫Øt k·∫øt n·ªëi an to√†n.')
        # C√≥ th·ªÉ th√™m m√£ ƒë·ªÉ l√†m s·∫°ch ho·∫∑c l∆∞u tr·ªØ ·ªü ƒë√¢y n·∫øu c·∫ßn
    except Exception as e:
        print(f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}')

