# main.py

import datetime, random, requests, threading
from telethon import events, Button
from datetime import timedelta
from api_utlis import delete_code_from_api
from config import (your_bot_username, channel_id, pending_activations,users_access, 
                    user_link_map, distributed_links, LINK_DURATION, activation_links,
                    client, bot_token, USER_ACTIVATIONS_API)


def initialize_activation_links():
    try:
        response = requests.get(USER_ACTIVATIONS_API)
        response.raise_for_status()
        # L∆∞u √Ω: ƒêo·∫°n m√£ sau gi·∫£ ƒë·ªãnh r·∫±ng d·ªØ li·ªáu t·ª´ API l√† m·ªôt list c·ªßa dict
        return {
            item['Code']: {
                'url': item['Link'],
                'duration': item['duration'],
                'id': item['id']  # L∆∞u √Ω th√™m d√≤ng n√†y
            } for item in response.json()
        }
    except requests.RequestException as e:
        print(f"Error fetching activation links: {e}")
        return {}  # Tr·∫£ v·ªÅ dict tr·ªëng n·∫øu c√≥ l·ªói


# ƒê√¢y l√† h√†m ki·ªÉm tra c√°c k√≠ch ho·∫°t ƒëang ch·ªù v√† n·∫±m ·ªü c·∫•p ƒë·ªô module
def check_pending_activations():
    global pending_activations, activation_links, user_link_map  # S·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c
    current_time = datetime.datetime.now()
    expired_users = []

    # Ki·ªÉm tra xem m√£ k√≠ch ho·∫°t n√†o ƒë√£ h·∫øt h·∫°n v√† c·∫ßn ƒë∆∞·ª£c tr·∫£ l·∫°i pool
    for user, expiry in pending_activations.items():
        if expiry < current_time:
            expired_users.append(user)
            code = user_link_map.get(user)
            if code:
                # Ch·ªâ tr·∫£ m√£ k√≠ch ho·∫°t tr·ªü l·∫°i pool n·∫øu n√≥ c√≤n t·ªìn t·∫°i trong distributed_links
                if code in distributed_links:
                    activation_links[code] = distributed_links[code]
                # Lo·∫°i b·ªè ng∆∞·ªùi d√πng kh·ªèi c√°c b·∫£n ƒë·ªì
                user_link_map.pop(user, None)

    # X√≥a ng∆∞·ªùi d√πng kh·ªèi pending_activations v√† distributed_links
    for user in expired_users:
        pending_activations.pop(user, None)
        distributed_links.pop(user, None)

    # L∆∞u √Ω cho ng∆∞·ªùi d√πng qu·∫£n tr·ªã bi·∫øt m√£ n√†o ƒë√£ ƒë∆∞·ª£c tr·∫£ l·∫°i pool
    if expired_users:
        print(f"Activation links for users {expired_users} have expired and are now available again.")


async def provide_new_activation_link(event, current_time):
    # Ch·ªçn m·ªôt m√£ ng·∫´u nhi√™n t·ª´ pool kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng
    available_codes = [code for code in activation_links if code not in user_link_map.values()]
    if available_codes:
        random_code = random.choice(available_codes)
        link = activation_links[random_code]['url']
        # C·∫≠p nh·∫≠t th√¥ng tin cho ng∆∞·ªùi d√πng
        user_link_map[event.sender_id] = random_code
        pending_activations[event.sender_id] = current_time + LINK_DURATION
        # G·ª≠i link m·ªõi
        await event.respond(
            f"ƒê·ªÉ k√≠ch ho·∫°t, vui l√≤ng truy c·∫≠p link sau v√† l·∫•y m√£ k√≠ch ho·∫°t c·ªßa b·∫°n: {link}",
            buttons=[Button.url("L·∫•y m√£ k√≠ch ho·∫°t", link)]
        )
    else:
        await event.respond("Hi·ªán kh√¥ng c√≤n m√£ k√≠ch ho·∫°t n√†o kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.")

@client.on(events.NewMessage(pattern='/checkcode'))
async def check_code_availability(event):
    # ƒê·∫øm s·ªë l∆∞·ª£ng m√£ theo t·ª´ng th·ªùi h·∫°n s·ª≠ d·ª•ng
    duration_counts = {}
    for code_info in activation_links.values():
        duration = code_info['duration']
        if duration in duration_counts:
            duration_counts[duration] += 1
        else:
            duration_counts[duration] = 1
    
    # T·∫°o v√† g·ª≠i th√¥ng b√°o v·ªÅ s·ªë l∆∞·ª£ng m√£ theo t·ª´ng th·ªùi h·∫°n
    response_message = "<b>T√¨nh tr·∫°ng m√£ k√≠ch ho·∫°t VIP hi·ªán t·∫°i:</b>\n"
    for duration, count in sorted(duration_counts.items()):
        response_message += f"Code VIP: <b>{duration} ng√†y</b> - c√≤n l·∫°i: <b>{count} m√£</b>\n"
    
    # Th√™m th√¥ng b√°o h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng /kichhoat
    response_message += "\n üëç S·ª≠ d·ª•ng <b>/kichhoat</b> ƒë·ªÉ l·∫•y m√£ k√≠ch ho·∫°t VIP.\n \n B·∫£n quy·ªÅn thu·ªôc v·ªÅ @BotShareFilesTTG"

    # Ki·ªÉm tra n·∫øu c√≥ m√£ kh·∫£ d·ª•ng ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi
    if duration_counts:
        await event.respond(response_message, parse_mode='html')
    else:
        await event.respond("Hi·ªán kh√¥ng c√≥ m√£ k√≠ch ho·∫°t n√†o kh·∫£ d·ª•ng.")


@client.on(events.NewMessage(pattern='/kichhoat'))
async def request_activation_link(event):
    check_pending_activations()
    current_time = datetime.datetime.now()

    # X·ª≠ l√Ω cho ng∆∞·ªùi d√πng ƒë√£ k√≠ch ho·∫°t VIP
    if event.sender_id in users_access and users_access[event.sender_id] > current_time:
        await provide_new_activation_link(event, current_time)
        return

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ nh·∫≠n link ch∆∞a v√† link ƒë√≥ c√≥ c√≤n hi·ªáu l·ª±c kh√¥ng
    if event.sender_id in pending_activations:
        if current_time < pending_activations[event.sender_id]:
            # N·∫øu link v·∫´n c√≤n hi·ªáu l·ª±c, th√¥ng b√°o cho ng∆∞·ªùi d√πng
            code = user_link_map[event.sender_id]
            link = activation_links[code]['url']
            await event.respond(
                f"B·∫°n ƒë√£ y√™u c·∫ßu k√≠ch ho·∫°t tr∆∞·ªõc ƒë√≥ v√† link v·∫´n c√≤n hi·ªáu l·ª±c. Vui l√≤ng truy c·∫≠p link sau ƒë·ªÉ l·∫•y m√£ k√≠ch ho·∫°t c·ªßa b·∫°n: {link}",
                buttons=[Button.url("L·∫•y m√£ k√≠ch ho·∫°t", link)]
            )
        else:
            # Link ƒë√£ h·∫øt h·∫°n, cung c·∫•p link m·ªõi
            await provide_new_activation_link(event, current_time)
    else:
        # Ng∆∞·ªùi d√πng ch∆∞a c√≥ link, cung c·∫•p link m·ªõi
        await provide_new_activation_link(event, current_time)

@client.on(events.NewMessage(pattern='/code (.+)'))
async def activate_code(event):
    check_pending_activations()
    code = event.pattern_match.group(1).strip()
    current_time = datetime.datetime.now()

    # Ki·ªÉm tra xem code c√≥ trong activation_links v√† ch∆∞a ƒë∆∞·ª£c ph√¢n ph·ªëi ho·∫∑c ƒë√£ ƒë∆∞·ª£c ph√¢n ph·ªëi cho sender_id hi·ªán t·∫°i
    if code in activation_links and (code not in distributed_links or distributed_links.get(code) == event.sender_id):
        code_info = activation_links[code]
        duration = timedelta(days=code_info["duration"])
        new_expiry_time = users_access.get(event.sender_id, current_time) + duration
        
        users_access[event.sender_id] = new_expiry_time
        distributed_links[code] = event.sender_id
        
        # K√≠ch ho·∫°t m√£ v√† l·∫•y id ƒë·ªÉ x√≥a tr√™n API
        code_id = code_info['id']  # Gi·∫£ s·ª≠ m·ªói entry c√≥ 'id'
        
        del activation_links[code]  # X√≥a m√£ kh·ªèi pool
        
        # X√≥a m√£ kh·ªèi API
        threading.Thread(target=delete_code_from_api, args=(code_id,)).start()
        
        print("activation_links after deletion: ", activation_links)
        await event.respond(f"B·∫°n ƒë√£ k√≠ch ho·∫°t th√†nh c√¥ng! Th·ªùi gian s·ª≠ d·ª•ng m·ªõi c·ªßa b·∫°n l√† {new_expiry_time.strftime('%Y-%m-%d %H:%M:%S')}.")
    else:
        await event.respond("M√£ k√≠ch ho·∫°t kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.")

@client.on(events.NewMessage(pattern='/start'))
async def send_welcome(event):
    check_pending_activations()
    # Ki·ªÉm tra payload t·ª´ link /start ƒë·ªÉ x√°c ƒë·ªãnh xem c√≥ c·∫ßn forward tin nh·∫Øn t·ª´ channel kh√¥ng
    if event.message.message.startswith('/start channel_'):
        channel_msg_id = int(event.message.message.split('_')[-1])
        await client.forward_messages(event.sender_id, channel_msg_id, channel_id)
    await event.respond("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot c·ªßa ch√∫ng t√¥i! D√πng /kichhoat ƒë·ªÉ k√≠ch ho·∫°t truy c·∫≠p.")

@client.on(events.NewMessage(func=lambda e: e.is_private))
async def handler(event):
    # Ki·ªÉm tra n·∫øu tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng '/' th√¨ kh√¥ng x·ª≠ l√Ω trong handler n√†y
    if event.text.startswith('/'):
        return
    
    if event.sender_id in users_access and datetime.datetime.now() < users_access[event.sender_id]:
        if event.media:
            caption = event.message.text if event.message.text else ""
            msg = await client.send_file(channel_id, event.media, caption=caption)
            start_link = f'https://t.me/{your_bot_username}?start=channel_{msg.id}'
            await event.respond(f'Media c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i. Click v√†o link n√†y ƒë·ªÉ xem: {start_link}', buttons=[Button.url('Xem Media', start_link)])
    else:
        await event.respond("B·∫°n c·∫ßn k√≠ch ho·∫°t truy c·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")

# B·∫Øt ƒë·∫ßu client
client.start(bot_token=bot_token)

# H√†m main ch√≠nh ƒë·ªÉ kh·ªüi ƒë·ªông bot
if __name__ == '__main__':
    # Kh·ªüi t·∫°o activation_links t·ª´ API tr∆∞·ªõc khi bot kh·ªüi ƒë·ªông
    activation_links.update(initialize_activation_links())
    print("activation_links main: ", activation_links)
    
    print("Kh·ªüi ch·∫°y bot th√†nh c√¥ng!")
    client.start(bot_token=bot_token)
    client.run_until_disconnected()